var searchIndex = {};
searchIndex["routing"] = {"doc":"Client and node implementations for a resilient decentralised network.","items":[[3,"NodeInfo","routing","Info about nodes in the routing table.",null,null],[3,"Client","","Interface for sending and receiving messages to and from a network of nodes in the role of a\nclient.",null,null],[3,"FullId","","Network identity component containing name, and public and private keys.",null,null],[3,"PublicId","","Network identity component containing name and public keys.",null,null],[3,"ImmutableData","","An immutable chunk of data.",null,null],[3,"ImmutableDataBackup","","Backup types",null,null],[3,"ImmutableDataSacrificial","","Sacrificial types",null,null],[3,"RequestMessage","","A request message wrapper",null,null],[12,"src","","Source authority",0,null],[12,"dst","","Destination authority",0,null],[12,"content","","The request content",0,null],[3,"ResponseMessage","","A response message wrapper",null,null],[12,"src","","Source authority",1,null],[12,"dst","","Destination authority",1,null],[12,"content","","The response content",1,null],[3,"SignedMessage","","Wrapper around a routing message, signed by the originator of the message.",null,null],[3,"Node","","Interface for sending and receiving messages to and from other nodes, in the role of a full\nrouting node.",null,null],[3,"PlainData","","Plain data with a name and a value.",null,null],[3,"StructuredData","","Mutable structured data.",null,null],[3,"MessageId","","Unique ID for messages",null,null],[4,"Authority","","An entity that can act as a source or destination of a message.",null,null],[13,"ClientManager","","Manager of a Client.  XorName is the hash of the Client&#39;s `client_key`.",2,null],[13,"NaeManager","","Manager of a network-addressable element.  XorName is the name of the element in question.",2,null],[13,"NodeManager","","Manager of a ManagedNode.  XorName is that of the ManagedNode.",2,null],[13,"ManagedNode","","A non-client node (i.e. a vault) which is managed by NodeManagers.  XorName is provided\nby the network relocation process immediately after bootstrapping.",2,null],[13,"Client","","A Client.",2,null],[12,"client_key","routing::Authority","The client&#39;s public signing key.  The hash of this specifies the location of the Client\nin the network address space.",2,null],[12,"peer_id","","The Crust peer ID of the client.",2,null],[12,"proxy_node_name","","The name of the single ManagedNode which the Client connects to and proxies all messages\nthrough.",2,null],[4,"Data","routing","This is the data types routing handles in the public interface",null,null],[13,"Structured","","`StructuredData` data type.",3,null],[13,"Immutable","","`ImmutableData` data type.",3,null],[13,"ImmutableBackup","","`ImmutableData` data type - backup copy.",3,null],[13,"ImmutableSacrificial","","`ImmutableData` data type - sacrificial copy.",3,null],[13,"Plain","","`PlainData` data type.",3,null],[4,"DataIdentifier","","An identifier to address a data chunk.",null,null],[13,"Structured","","Data request, (Identifier, TypeTag) pair for name resolution, for StructuredData.",4,null],[13,"Immutable","","Data request, (Identifier), for `ImmutableData`.",4,null],[13,"ImmutableBackup","","Data request, (Identifier), for a backup copy of `ImmutableData`.",4,null],[13,"ImmutableSacrificial","","Data request, (Identifier), for a sacrificial copy of `ImmutableData`.",4,null],[13,"Plain","","Request for PlainData.",4,null],[4,"InterfaceError","","The type of errors that can occur if routing is unable to handle a send request.",null,null],[13,"NotConnected","","We are not connected to the network.",5,null],[13,"ChannelRxError","","Error while trying to receive a message from a channel",5,null],[13,"EventSenderError","","Error while trying to transmit an event via a channel",5,null],[4,"RoutingError","","The type of errors that can occur during handling of routing events.",null,null],[13,"NotBootstrapped","","The node/client has not bootstrapped yet",6,null],[13,"Terminated","","Invalid State",6,null],[13,"BadAuthority","","Invalid requester or handler authorities",6,null],[13,"AlreadyConnected","","Failure to connect to an already connected node",6,null],[13,"UnknownMessageType","","Received message having unknown type",6,null],[13,"FailedSignature","","Failed signature check",6,null],[13,"NotEnoughSignatures","","Not Enough signatures",6,null],[13,"DuplicateSignatures","","Duplicate signatures",6,null],[13,"FilterCheckFailed","","Duplicate request received",6,null],[13,"FailedToBootstrap","","Failure to bootstrap off the provided endpoints",6,null],[13,"RoutingTableEmpty","","Unexpected empty routing table",6,null],[13,"RejectedPublicId","","Public id rejected because of disallowed relocated status",6,null],[13,"RefusedFromRoutingTable","","Routing table did not add the node information, either because it was already added, or\nbecause it did not improve the routing table",6,null],[13,"RejectedGetCloseGroup","","Rejected providing the close group, because the destination address does not match any of\nthe sender&#39;s buckets",6,null],[13,"RejectedGetNetworkName","","A client with `client_restriction == true` tried to relocate.",6,null],[13,"Utf8","","String errors",6,null],[13,"Interface","","Interface error",6,null],[13,"Io","","i/o error",6,null],[13,"SendEventError","","Channel sending error",6,null],[13,"BitIndexOutOfBoundsError","","The bit index for a `XorName` was out of bounds.",6,null],[13,"InvalidStateForOperation","","Current state is invalid for the operation",6,null],[13,"SerialisationError","","Serialisation Error",6,null],[13,"AsymmetricDecryptionFailure","","Asymmetric Decryption Failure",6,null],[13,"UnknownConnection","","Unknown Connection",6,null],[13,"DirectionCheckFailed","","The message is not getting closer to the target",6,null],[13,"RoutingTableBucketIndexFailed","","Density mismatch",6,null],[13,"InvalidDestination","","Invalid Destination",6,null],[13,"ProxyConnectionNotFound","","Connection to proxy node does not exist in proxy map",6,null],[13,"ClientConnectionNotFound","","Connection to client does not exist in client map",6,null],[13,"InvalidSource","","Invalid Source",6,null],[13,"CannotTunnelThroughTunnel","","Attempted to use a node as a tunnel that is not directly connected",6,null],[4,"Event","","An Event raised by a `Node` or `Client` via its event sender.",null,null],[13,"Request","","Request.",7,null],[13,"Response","","Response.",7,null],[13,"NodeAdded","","A new node joined the network and may be a member of group authorities we also belong to.",7,null],[13,"NodeLost","","A node left the network and may have been a member of group authorities we also belong to.",7,null],[13,"Connected","","The client has successfully connected to a proxy node on the network.",7,null],[13,"Disconnected","","We have disconnected from the network.",7,null],[13,"GetNetworkNameFailed","","We failed to relocate as a new node in the network.",7,null],[13,"NetworkStartupFailed","","We failed to start listening for incoming connections as the first node.",7,null],[13,"Tick","","This event is sent periodically every time Routing sends the `Heartbeat` messages.",7,null],[4,"RequestContent","","The request types",null,null],[13,"GetNetworkName","","Ask the network to alter your `PublicId` name.",8,null],[12,"current_id","routing::RequestContent","The client&#39;s `PublicId` (public keys and name)",8,null],[12,"message_id","","The message&#39;s unique identifier.",8,null],[13,"ExpectCloseNode","routing","Notify a joining node&#39;s `NodeManager` so that it expects a `GetCloseGroup` request from it.",8,null],[12,"expect_id","routing::RequestContent","The joining node&#39;s `PublicId` (public keys and name)",8,null],[12,"client_auth","","The client&#39;s current authority.",8,null],[12,"message_id","","The message&#39;s unique identifier.",8,null],[13,"GetCloseGroup","routing","Request the `PublicId`s of the recipient&#39;s close group.",8,null],[13,"Connect","","Request a direct connection to the recipient.",8,null],[13,"ConnectionInfo","","Send our connection_info encrypted to a node we wish to connect to and have the keys for.",8,null],[12,"encrypted_connection_info","routing::RequestContent","Encrypted Crust connection info.",8,null],[12,"nonce_bytes","","Nonce used to provide a salt in the encrytped message.",8,null],[13,"GetPublicId","routing","Ask each member of a group near a node address for the `PublicId`.",8,null],[13,"GetPublicIdWithConnectionInfo","","Ask for a `PublicId` but provide our connection_info encrytped.",8,null],[12,"encrypted_connection_info","routing::RequestContent","Encrypted crust connection_info (socket address and protocol).",8,null],[12,"nonce_bytes","","Nonce used to provide a salt in the encrytped message.",8,null],[13,"Refresh","routing","Message from upper layers sending network state on any network churn event.",8,null],[13,"Get","","Ask for data from network, passed from API with data name as parameter",8,null],[13,"Put","","Put data to network. Provide actual data as parameter",8,null],[13,"Post","","Post data to network. Provide actual data as parameter",8,null],[13,"Delete","","Delete data from network. Provide actual data as parameter",8,null],[4,"ResponseContent","","The response types",null,null],[13,"GetNetworkName","","Reply with the new `PublicId` for the joining node.",9,null],[12,"relocated_id","routing::ResponseContent","Supplied `PublicId`, but with the new name",9,null],[12,"close_group_ids","","Our close group `PublicId`s.",9,null],[12,"message_id","","The message&#39;s unique identifier.",9,null],[13,"GetPublicId","routing","Reply with the requested `PublicId`.",9,null],[12,"public_id","routing::ResponseContent","The requested `PublicId`",9,null],[13,"GetPublicIdWithConnectionInfo","routing","Reply with the `PublicId` along with the sender&#39;s encrypted connection_info",9,null],[12,"public_id","routing::ResponseContent","Our `PublicId`",9,null],[12,"encrypted_connection_info","","Their connection_info",9,null],[12,"nonce_bytes","","Message salt",9,null],[13,"GetCloseGroup","routing","Return the close `PublicId`s back to the requestor.",9,null],[12,"close_group_ids","routing::ResponseContent","Our close group `PublicId`s.",9,null],[12,"message_id","","The message ID.",9,null],[13,"GetSuccess","routing","Reply with the requested data (may not be ignored)",9,null],[13,"PutSuccess","","Success token for Put (may be ignored)",9,null],[13,"PostSuccess","","Success token for Post  (may be ignored)",9,null],[13,"DeleteSuccess","","Success token for delete  (may be ignored)",9,null],[13,"GetFailure","","Error for `Get`, includes signed request to prevent injection attacks",9,null],[12,"id","routing::ResponseContent","Unique message identifier",9,null],[12,"request","","Originator&#39;s signed request",9,null],[12,"external_error_indicator","","Error type sent back, may be injected from upper layers",9,null],[13,"PutFailure","routing","Error for Put, includes signed request to prevent injection attacks",9,null],[12,"id","routing::ResponseContent","Unique message identifier",9,null],[12,"request","","Originator&#39;s signed request",9,null],[12,"external_error_indicator","","Error type sent back, may be injected from upper layers",9,null],[13,"PostFailure","routing","Error for Post, includes signed request to prevent injection attacks",9,null],[12,"id","routing::ResponseContent","Unique message identifier",9,null],[12,"request","","Originator&#39;s signed request",9,null],[12,"external_error_indicator","","Error type sent back, may be injected from upper layers",9,null],[13,"DeleteFailure","routing","Error for delete, includes signed request to prevent injection attacks",9,null],[12,"id","routing::ResponseContent","Unique message identifier",9,null],[12,"request","","Originator&#39;s signed request",9,null],[12,"external_error_indicator","","Error type sent back, may be injected from upper layers",9,null],[4,"RoutingMessage","routing","Variant type to hold `either` a request or response.",null,null],[13,"Request","","Outgoing RPC type message.",10,null],[13,"Response","","Incoming answer to request RPC.",10,null],[5,"normal_to_backup","","Converts normal `ImmutableData` name to backup name.",null,{"inputs":[{"name":"xorname"}],"output":{"name":"xorname"}}],[5,"backup_to_normal","","Converts backup `ImmutableData` name to normal name.",null,{"inputs":[{"name":"xorname"}],"output":{"name":"xorname"}}],[5,"normal_to_sacrificial","","Converts normal `ImmutableData` name to sacrificial name.",null,{"inputs":[{"name":"xorname"}],"output":{"name":"xorname"}}],[5,"sacrificial_to_normal","","Converts sacrificial `ImmutableData` name to normal name.",null,{"inputs":[{"name":"xorname"}],"output":{"name":"xorname"}}],[5,"backup_to_sacrificial","","Converts backup `ImmutableData` name to sacrificial name.",null,{"inputs":[{"name":"xorname"}],"output":{"name":"xorname"}}],[5,"sacrificial_to_backup","","Converts sacrificial `ImmutableData` name to backup name.",null,{"inputs":[{"name":"xorname"}],"output":{"name":"xorname"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"authority"}],"output":{"name":"authority"}}],[11,"cmp","","",2,{"inputs":[{"name":"authority"},{"name":"authority"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"authority"},{"name":"authority"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"authority"},{"name":"authority"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"authority"},{"name":"authority"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"authority"},{"name":"authority"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"authority"},{"name":"authority"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"authority"},{"name":"authority"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"authority"},{"name":"authority"}],"output":{"name":"bool"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"authority"},{"name":"__s"}],"output":{"name":"result"}}],[11,"is_group","","Returns true if group authority, otherwise false.",2,{"inputs":[{"name":"authority"}],"output":{"name":"bool"}}],[11,"name","","Returns the name of authority.",2,{"inputs":[{"name":"authority"}],"output":{"name":"xorname"}}],[11,"to_destination","","Returns the `Destination` for the `RoutingTable`.",2,{"inputs":[{"name":"authority"}],"output":{"name":"destination"}}],[11,"fmt","","",2,{"inputs":[{"name":"authority"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Client`.",11,{"inputs":[{"name":"sender"},{"name":"option"},{"name":"bool"}],"output":{"name":"result"}}],[11,"send_get_request","","Send a Get message with a `DataIdentifier` to an `Authority`, signed with given keys.",11,{"inputs":[{"name":"client"},{"name":"authority"},{"name":"dataidentifier"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_put_request","","Add something to the network",11,{"inputs":[{"name":"client"},{"name":"authority"},{"name":"data"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_post_request","","Change something already on the network",11,{"inputs":[{"name":"client"},{"name":"authority"},{"name":"data"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_delete_request","","Remove something from the network",11,{"inputs":[{"name":"client"},{"name":"authority"},{"name":"data"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"drop","","",11,{"inputs":[{"name":"client"}],"output":null}],[11,"eq","","",12,{"inputs":[{"name":"nodeinfo"},{"name":"nodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"nodeinfo"},{"name":"nodeinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"nodeinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"nodeinfo"}],"output":{"name":"nodeinfo"}}],[11,"name","","",12,{"inputs":[{"name":"nodeinfo"}],"output":{"name":"xorname"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"data"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"data"}],"output":{"name":"data"}}],[11,"cmp","","",3,{"inputs":[{"name":"data"},{"name":"data"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"data"},{"name":"data"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"data"},{"name":"data"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"data"},{"name":"data"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"data"},{"name":"data"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"data"},{"name":"data"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"data"},{"name":"data"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"data"},{"name":"data"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"name","","Return data name.",3,{"inputs":[{"name":"data"}],"output":{"name":"xorname"}}],[11,"identifier","","Return data identifier.",3,{"inputs":[{"name":"data"}],"output":{"name":"dataidentifier"}}],[11,"payload_size","","Return data size.",3,{"inputs":[{"name":"data"}],"output":{"name":"usize"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"dataidentifier"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"dataidentifier"}],"output":{"name":"dataidentifier"}}],[11,"cmp","","",4,{"inputs":[{"name":"dataidentifier"},{"name":"dataidentifier"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"dataidentifier"},{"name":"dataidentifier"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"dataidentifier"},{"name":"dataidentifier"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"dataidentifier"},{"name":"dataidentifier"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"dataidentifier"},{"name":"dataidentifier"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"dataidentifier"},{"name":"dataidentifier"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"dataidentifier"},{"name":"dataidentifier"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"dataidentifier"},{"name":"dataidentifier"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"dataidentifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"fmt","","",3,{"inputs":[{"name":"data"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","DataIdentifier name.",4,{"inputs":[{"name":"dataidentifier"}],"output":{"name":"xorname"}}],[11,"fmt","","",5,{"inputs":[{"name":"interfaceerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"eventsendererror"}],"output":{"name":"interfaceerror"}}],[11,"from","","",5,{"inputs":[{"name":"recverror"}],"output":{"name":"interfaceerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"routingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"utf8error"}],"output":{"name":"routingerror"}}],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"routingerror"}}],[11,"from","","",6,{"inputs":[{"name":"interfaceerror"}],"output":{"name":"routingerror"}}],[11,"from","","",6,{"inputs":[{"name":"senderror"}],"output":{"name":"routingerror"}}],[11,"from","","",6,{"inputs":[{"name":"serialisationerror"}],"output":{"name":"routingerror"}}],[11,"from","","",6,{"inputs":[{"name":"bitindexoutofboundserror"}],"output":{"name":"routingerror"}}],[11,"eq","","",7,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"fmt","","",7,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"fullid"}],"output":{"name":"fullid"}}],[11,"new","","Construct a FullId with newly generated keys.",13,{"inputs":[],"output":{"name":"fullid"}}],[11,"with_keys","","Construct with given keys, (Client requirement).",13,null],[11,"public_id","","Returns public ID reference.",13,{"inputs":[{"name":"fullid"}],"output":{"name":"publicid"}}],[11,"public_id_mut","","Returns mutable reference to public ID.",13,{"inputs":[{"name":"fullid"}],"output":{"name":"publicid"}}],[11,"signing_private_key","","Secret signing key.",13,{"inputs":[{"name":"fullid"}],"output":{"name":"secretkey"}}],[11,"encrypting_private_key","","Private encryption key.",13,{"inputs":[{"name":"fullid"}],"output":{"name":"secretkey"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"fullid"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"publicid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"publicid"}],"output":{"name":"publicid"}}],[11,"cmp","","",14,{"inputs":[{"name":"publicid"},{"name":"publicid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"publicid"},{"name":"publicid"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"publicid"},{"name":"publicid"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"publicid"},{"name":"publicid"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"publicid"},{"name":"publicid"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"publicid"},{"name":"publicid"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"publicid"},{"name":"publicid"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"publicid"},{"name":"publicid"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"publicid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Return initial/relocated name.",14,{"inputs":[{"name":"publicid"}],"output":{"name":"xorname"}}],[11,"set_name","","Name field is initially same as original_name, this should be replaced by relocated name\ncalculated by the nodes close to original_name by using this method",14,{"inputs":[{"name":"publicid"},{"name":"xorname"}],"output":null}],[11,"encrypting_public_key","","Return public signing key.",14,{"inputs":[{"name":"publicid"}],"output":{"name":"publickey"}}],[11,"signing_public_key","","Return public signing key.",14,{"inputs":[{"name":"publicid"}],"output":{"name":"publickey"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"immutabledata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"immutabledata"},{"name":"immutabledata"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"immutabledata"},{"name":"immutabledata"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"immutabledata"},{"name":"immutabledata"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"immutabledata"},{"name":"immutabledata"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"immutabledata"},{"name":"immutabledata"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"immutabledata"},{"name":"immutabledata"}],"output":{"name":"ordering"}}],[11,"eq","","",15,{"inputs":[{"name":"immutabledata"},{"name":"immutabledata"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"immutabledata"},{"name":"immutabledata"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"immutabledata"}],"output":{"name":"immutabledata"}}],[11,"hash","","",15,null],[11,"new","","Creates a new instance of `ImmutableData`",15,{"inputs":[{"name":"vec"}],"output":{"name":"immutabledata"}}],[11,"value","","Returns the value",15,{"inputs":[{"name":"immutabledata"}],"output":{"name":"vec"}}],[11,"name","","Returns name ensuring invariant.",15,{"inputs":[{"name":"immutabledata"}],"output":{"name":"xorname"}}],[11,"payload_size","","Returns size of contained value.",15,{"inputs":[{"name":"immutabledata"}],"output":{"name":"usize"}}],[11,"identifier","","Returns `DataIdentifier` for this data element.",15,{"inputs":[{"name":"immutabledata"}],"output":{"name":"dataidentifier"}}],[11,"fmt","","",15,{"inputs":[{"name":"immutabledata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"immutabledatabackup"},{"name":"__s"}],"output":{"name":"result"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"immutabledatabackup"},{"name":"immutabledatabackup"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"immutabledatabackup"},{"name":"immutabledatabackup"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"immutabledatabackup"},{"name":"immutabledatabackup"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"immutabledatabackup"},{"name":"immutabledatabackup"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"immutabledatabackup"},{"name":"immutabledatabackup"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"immutabledatabackup"},{"name":"immutabledatabackup"}],"output":{"name":"ordering"}}],[11,"eq","","",16,{"inputs":[{"name":"immutabledatabackup"},{"name":"immutabledatabackup"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"immutabledatabackup"},{"name":"immutabledatabackup"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"immutabledatabackup"}],"output":{"name":"immutabledatabackup"}}],[11,"hash","","",16,null],[11,"new","","Creates a new instance of `ImmutableDataiBackup`",16,{"inputs":[{"name":"immutabledata"}],"output":{"name":"immutabledatabackup"}}],[11,"value","","Returns the value.",16,{"inputs":[{"name":"immutabledatabackup"}],"output":{"name":"immutabledata"}}],[11,"name","","Returns name ensuring invariant.",16,{"inputs":[{"name":"immutabledatabackup"}],"output":{"name":"xorname"}}],[11,"payload_size","","Returns size of contained value.",16,{"inputs":[{"name":"immutabledatabackup"}],"output":{"name":"usize"}}],[11,"identifier","","Returns `DataIdentifier` for this data element.",16,{"inputs":[{"name":"immutabledatabackup"}],"output":{"name":"dataidentifier"}}],[11,"fmt","","",16,{"inputs":[{"name":"immutabledatabackup"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"immutabledatasacrificial"},{"name":"__s"}],"output":{"name":"result"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"immutabledatasacrificial"},{"name":"immutabledatasacrificial"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"immutabledatasacrificial"},{"name":"immutabledatasacrificial"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"immutabledatasacrificial"},{"name":"immutabledatasacrificial"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"immutabledatasacrificial"},{"name":"immutabledatasacrificial"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"immutabledatasacrificial"},{"name":"immutabledatasacrificial"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"immutabledatasacrificial"},{"name":"immutabledatasacrificial"}],"output":{"name":"ordering"}}],[11,"eq","","",17,{"inputs":[{"name":"immutabledatasacrificial"},{"name":"immutabledatasacrificial"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"immutabledatasacrificial"},{"name":"immutabledatasacrificial"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"immutabledatasacrificial"}],"output":{"name":"immutabledatasacrificial"}}],[11,"hash","","",17,null],[11,"new","","Creates a new instance of `ImmutableDataSacrificial`.",17,{"inputs":[{"name":"immutabledata"}],"output":{"name":"immutabledatasacrificial"}}],[11,"value","","Returns the value.",17,{"inputs":[{"name":"immutabledatasacrificial"}],"output":{"name":"immutabledata"}}],[11,"name","","Returns name ensuring invariant.",17,{"inputs":[{"name":"immutabledatasacrificial"}],"output":{"name":"xorname"}}],[11,"payload_size","","Returns size of contained value.",17,{"inputs":[{"name":"immutabledatasacrificial"}],"output":{"name":"usize"}}],[11,"identifier","","Returns `DataIdentifier` for this data element.",17,{"inputs":[{"name":"immutabledatasacrificial"}],"output":{"name":"dataidentifier"}}],[11,"fmt","","",17,{"inputs":[{"name":"immutabledatasacrificial"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"signedmessage"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"signedmessage"}],"output":{"name":"signedmessage"}}],[11,"eq","","",18,{"inputs":[{"name":"signedmessage"},{"name":"signedmessage"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"signedmessage"},{"name":"signedmessage"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"signedmessage"},{"name":"signedmessage"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"signedmessage"},{"name":"signedmessage"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"signedmessage"},{"name":"signedmessage"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"signedmessage"},{"name":"signedmessage"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"signedmessage"},{"name":"signedmessage"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"signedmessage"},{"name":"signedmessage"}],"output":{"name":"ordering"}}],[11,"new","","Creates a `SignedMessage` with the given `content` and signed by the given `full_id`.",18,{"inputs":[{"name":"routingmessage"},{"name":"fullid"}],"output":{"name":"result"}}],[11,"check_integrity","","Confirms the signature against the claimed public ID.",18,{"inputs":[{"name":"signedmessage"}],"output":{"name":"result"}}],[11,"content","","The routing message that was signed.",18,{"inputs":[{"name":"signedmessage"}],"output":{"name":"routingmessage"}}],[11,"public_id","","The `PublicId` associated with the signed message",18,{"inputs":[{"name":"signedmessage"}],"output":{"name":"publicid"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"routingmessage"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"routingmessage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"routingmessage"}],"output":{"name":"routingmessage"}}],[11,"eq","","",10,{"inputs":[{"name":"routingmessage"},{"name":"routingmessage"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"routingmessage"},{"name":"routingmessage"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"routingmessage"},{"name":"routingmessage"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"routingmessage"},{"name":"routingmessage"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"routingmessage"},{"name":"routingmessage"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"routingmessage"},{"name":"routingmessage"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"routingmessage"},{"name":"routingmessage"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"routingmessage"},{"name":"routingmessage"}],"output":{"name":"ordering"}}],[11,"src","","Returns the sender, i. e. the source authority of the routing message.",10,{"inputs":[{"name":"routingmessage"}],"output":{"name":"authority"}}],[11,"dst","","Returns the recipient, i. e. the destination authority of routing message.",10,{"inputs":[{"name":"routingmessage"}],"output":{"name":"authority"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"requestmessage"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"requestmessage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"requestmessage"}],"output":{"name":"requestmessage"}}],[11,"eq","","",0,{"inputs":[{"name":"requestmessage"},{"name":"requestmessage"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"requestmessage"},{"name":"requestmessage"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"requestmessage"},{"name":"requestmessage"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"requestmessage"},{"name":"requestmessage"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"requestmessage"},{"name":"requestmessage"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"requestmessage"},{"name":"requestmessage"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"requestmessage"},{"name":"requestmessage"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"requestmessage"},{"name":"requestmessage"}],"output":{"name":"ordering"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"responsemessage"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"responsemessage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"responsemessage"}],"output":{"name":"responsemessage"}}],[11,"eq","","",1,{"inputs":[{"name":"responsemessage"},{"name":"responsemessage"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"responsemessage"},{"name":"responsemessage"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"responsemessage"},{"name":"responsemessage"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"responsemessage"},{"name":"responsemessage"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"responsemessage"},{"name":"responsemessage"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"responsemessage"},{"name":"responsemessage"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"responsemessage"},{"name":"responsemessage"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"responsemessage"},{"name":"responsemessage"}],"output":{"name":"ordering"}}],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"requestcontent"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"requestcontent"}],"output":{"name":"requestcontent"}}],[11,"eq","","",8,{"inputs":[{"name":"requestcontent"},{"name":"requestcontent"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"requestcontent"},{"name":"requestcontent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"requestcontent"},{"name":"requestcontent"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"requestcontent"},{"name":"requestcontent"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"requestcontent"},{"name":"requestcontent"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"requestcontent"},{"name":"requestcontent"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"requestcontent"},{"name":"requestcontent"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"requestcontent"},{"name":"requestcontent"}],"output":{"name":"ordering"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"responsecontent"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"responsecontent"}],"output":{"name":"responsecontent"}}],[11,"eq","","",9,{"inputs":[{"name":"responsecontent"},{"name":"responsecontent"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"responsecontent"},{"name":"responsecontent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"responsecontent"},{"name":"responsecontent"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"responsecontent"},{"name":"responsecontent"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"responsecontent"},{"name":"responsecontent"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"responsecontent"},{"name":"responsecontent"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"responsecontent"},{"name":"responsecontent"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"responsecontent"},{"name":"responsecontent"}],"output":{"name":"ordering"}}],[11,"fmt","","",18,{"inputs":[{"name":"signedmessage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"requestcontent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"responsecontent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Node`.",19,{"inputs":[{"name":"sender"},{"name":"bool"}],"output":{"name":"result"}}],[11,"send_get_request","","Send a `Get` request to `dst` to retrieve data from the network.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"dataidentifier"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_put_request","","Send a `Put` request to `dst` to store data on the network.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"data"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_post_request","","Send a `Post` request to `dst` to modify data on the network.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"data"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_delete_request","","Send a `Delete` request to `dst` to remove data from the network.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"data"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_get_success","","Respond to a `Get` request indicating success and sending the requested data.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"data"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_get_failure","","Respond to a `Get` request indicating failure.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"requestmessage"},{"name":"vec"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_put_success","","Respond to a `Put` request indicating success.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"dataidentifier"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_put_failure","","Respond to a `Put` request indicating failure.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"requestmessage"},{"name":"vec"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_post_success","","Respond to a `Post` request indicating success.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"dataidentifier"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_post_failure","","Respond to a `Post` request indicating failure.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"requestmessage"},{"name":"vec"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_delete_success","","Respond to a `Delete` request indicating success.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"dataidentifier"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_delete_failure","","Respond to a `Delete` request indicating failure.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"requestmessage"},{"name":"vec"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"send_refresh_request","","Send a `Refresh` request from `src` to `src` to trigger churn.",19,{"inputs":[{"name":"node"},{"name":"authority"},{"name":"authority"},{"name":"vec"},{"name":"messageid"}],"output":{"name":"result"}}],[11,"close_group","","Returns the names of the nodes in the routing table which are closest to the given one.",19,{"inputs":[{"name":"node"},{"name":"xorname"}],"output":{"name":"result"}}],[11,"name","","Returns the name of this node.",19,{"inputs":[{"name":"node"}],"output":{"name":"result"}}],[11,"quorum_size","","Returns the name of this node.",19,{"inputs":[{"name":"node"}],"output":{"name":"result"}}],[11,"drop","","",19,{"inputs":[{"name":"node"}],"output":null}],[11,"cmp","","",20,{"inputs":[{"name":"plaindata"},{"name":"plaindata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"plaindata"},{"name":"plaindata"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"plaindata"},{"name":"plaindata"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"plaindata"},{"name":"plaindata"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"plaindata"},{"name":"plaindata"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"plaindata"},{"name":"plaindata"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"plaindata"},{"name":"plaindata"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"plaindata"},{"name":"plaindata"}],"output":{"name":"bool"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"plaindata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"plaindata"}],"output":{"name":"plaindata"}}],[11,"hash","","",20,null],[11,"new","","Creates a new instance of `PlainData`.",20,{"inputs":[{"name":"xorname"},{"name":"vec"}],"output":{"name":"plaindata"}}],[11,"value","","Returns the value.",20,{"inputs":[{"name":"plaindata"}],"output":{"name":"vec"}}],[11,"name","","Returns the name.",20,{"inputs":[{"name":"plaindata"}],"output":{"name":"xorname"}}],[11,"payload_size","","Returns the size of the contained data. Equivalent to `value().len()`.",20,{"inputs":[{"name":"plaindata"}],"output":{"name":"usize"}}],[11,"identifier","","Returns `DataIdentifier` for this data element.",20,{"inputs":[{"name":"plaindata"}],"output":{"name":"dataidentifier"}}],[11,"fmt","","",20,{"inputs":[{"name":"plaindata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"structureddata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"structureddata"}],"output":{"name":"structureddata"}}],[11,"cmp","","",21,{"inputs":[{"name":"structureddata"},{"name":"structureddata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"structureddata"},{"name":"structureddata"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"structureddata"},{"name":"structureddata"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"structureddata"},{"name":"structureddata"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"structureddata"},{"name":"structureddata"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"structureddata"},{"name":"structureddata"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"structureddata"},{"name":"structureddata"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"structureddata"},{"name":"structureddata"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"new","","Creates a new `StructuredData` signed with `signing_key`.",21,{"inputs":[{"name":"u64"},{"name":"xorname"},{"name":"u64"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"option"}],"output":{"name":"result"}}],[11,"compute_name","","This is a static function that computes the name of a `StructuredData` given its type tag\nand identifier. To request the data with that type tag and identifier, a `Get` request\nneeds to be sent to that name&#39;s `NaeManager`.",21,{"inputs":[{"name":"u64"},{"name":"xorname"}],"output":{"name":"xorname"}}],[11,"replace_with_other","","Replaces this data item with the given updated version if the update is valid, otherwise\nreturns an error.",21,{"inputs":[{"name":"structureddata"},{"name":"structureddata"}],"output":{"name":"result"}}],[11,"name","","Returns the name, computed from the type tag and identifier.",21,{"inputs":[{"name":"structureddata"}],"output":{"name":"xorname"}}],[11,"identifier","","Returns `DataIdentifier` for this data element.",21,{"inputs":[{"name":"structureddata"}],"output":{"name":"dataidentifier"}}],[11,"validate_self_against_successor","","Verifies that `other` is a valid update for `self`; returns an error otherwise.",21,{"inputs":[{"name":"structureddata"},{"name":"structureddata"}],"output":{"name":"result"}}],[11,"add_signature","","Adds a signature with the given `secret_key` to the `previous_owner_signatures` and returns\nthe number of signatures that are still required. If more than 50% of the previous owners\nhave signed, 0 is returned and validation is complete.",21,{"inputs":[{"name":"structureddata"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"replace_signatures","","Overwrite any existing signatures with the new signatures provided.",21,{"inputs":[{"name":"structureddata"},{"name":"vec"}],"output":null}],[11,"get_type_tag","","Get the type_tag",21,{"inputs":[{"name":"structureddata"}],"output":{"name":"u64"}}],[11,"get_identifier","","Get the identifier",21,{"inputs":[{"name":"structureddata"}],"output":{"name":"xorname"}}],[11,"get_data","","Get the serialised data",21,{"inputs":[{"name":"structureddata"}],"output":{"name":"vec"}}],[11,"get_previous_owner_keys","","Get the previous owner keys",21,{"inputs":[{"name":"structureddata"}],"output":{"name":"vec"}}],[11,"get_version","","Get the version",21,{"inputs":[{"name":"structureddata"}],"output":{"name":"u64"}}],[11,"get_owner_keys","","Get the current owner keys",21,{"inputs":[{"name":"structureddata"}],"output":{"name":"vec"}}],[11,"get_previous_owner_signatures","","Get previous owner signatures",21,{"inputs":[{"name":"structureddata"}],"output":{"name":"vec"}}],[11,"payload_size","","Return data size.",21,{"inputs":[{"name":"structureddata"}],"output":{"name":"usize"}}],[11,"fmt","","",21,{"inputs":[{"name":"structureddata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"messageid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"messageid"},{"name":"messageid"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"messageid"},{"name":"messageid"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"messageid"}],"output":{"name":"messageid"}}],[11,"fmt","","",22,{"inputs":[{"name":"messageid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"messageid"},{"name":"messageid"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"messageid"},{"name":"messageid"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"messageid"},{"name":"messageid"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"messageid"},{"name":"messageid"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"messageid"},{"name":"messageid"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"messageid"},{"name":"messageid"}],"output":{"name":"ordering"}}],[11,"new","","Generate a new `MessageId` with random content.",22,{"inputs":[],"output":{"name":"messageid"}}],[11,"zero","","Generate a `MessageId` with value 0. This should only be used for messages where there is\nno danger of duplication.",22,{"inputs":[],"output":{"name":"messageid"}}],[11,"from_lost_node","","Generate a new `MessageId` with contents extracted from lost node.",22,{"inputs":[{"name":"xorname"}],"output":{"name":"messageid"}}],[11,"from_added_node","","Generate a new `MessageId` with contents extracted from new node.",22,{"inputs":[{"name":"xorname"}],"output":{"name":"messageid"}}],[11,"from_reverse","","Generate the reverse of the given `MessageId`.",22,{"inputs":[{"name":"messageid"}],"output":{"name":"messageid"}}],[11,"increment_first_byte","","Generate the increment (on the MSB only) of the given `MessageId`.",22,{"inputs":[{"name":"messageid"}],"output":{"name":"messageid"}}],[11,"decrement_first_byte","","Generate the decrement (on the MSB only) of the given `MessageId`.",22,{"inputs":[{"name":"messageid"}],"output":{"name":"messageid"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"messageid"}}],[17,"MAX_STRUCTURED_DATA_SIZE_IN_BYTES","","Maximum allowed size for a Structured Data to grow to",null,null]],"paths":[[3,"RequestMessage"],[3,"ResponseMessage"],[4,"Authority"],[4,"Data"],[4,"DataIdentifier"],[4,"InterfaceError"],[4,"RoutingError"],[4,"Event"],[4,"RequestContent"],[4,"ResponseContent"],[4,"RoutingMessage"],[3,"Client"],[3,"NodeInfo"],[3,"FullId"],[3,"PublicId"],[3,"ImmutableData"],[3,"ImmutableDataBackup"],[3,"ImmutableDataSacrificial"],[3,"SignedMessage"],[3,"Node"],[3,"PlainData"],[3,"StructuredData"],[3,"MessageId"]]};
initSearch(searchIndex);
